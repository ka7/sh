# .sh/lib/functions 20151231 - 20221230
# Copyright (C) 1995-2022 Mark Constable <markc@renta.net> (AGPL-3.0)

f () { find . -type f -iname '*'$*'*'; }

if [[ $OSTYP == openwrt ]]; then
    sc () { $SUDO /etc/init.d/$2 $1; }
elif [[ $OSTYP == alpine ]]; then
    sc () {
        if [ $1 = 'enable' ]; then
            $SUDO rc-update add $2
        elif [ $1 = 'disable' ]; then
            $SUDO rc-update del $2
        else
            $SUDO rc-service $2 $1
        fi
    }
else
    f () { find . -type f -iname '*'$*'*' -ls; }
    sc () { $SUDO systemctl $1 $2; }
fi

chktime ()
{
    [[ $(($(stat -c %X $1) + $2)) < $(date +%s) ]] && return 0 || return 1
}

gethost ()
{
    echo "\
ADMIN='$ADMIN'
AHOST='$AHOST'
AMAIL='$AMAIL'
ANAME='$ANAME'
APASS='$APASS'
A_GID='$A_GID'
A_UID='$A_UID'
BPATH='$BPATH'
CIMAP='$CIMAP'
CSMTP='$CSMTP'
C_DNS='$C_DNS'
C_FPM='$C_FPM'
C_SQL='$C_SQL'
C_SSL='$C_SSL'
C_WEB='$C_WEB'
DBMYS='$DBMYS'
DBSQL='$DBSQL'
DHOST='$DHOST'
DNAME='$DNAME'
DPASS='$DPASS'
DPATH='$DPATH'
DPORT='$DPORT'
DTYPE='$DTYPE'
DUSER='$DUSER'
EPASS='$EPASS'
EXMYS='$EXMYS'
EXSQL='$EXSQL'
HDOMN='$HDOMN'
HNAME='$HNAME'
IP4_0='$IP4_0'
LROOT='$LROOT'
MHOST='$MHOST'
MPATH='$MPATH'
OSMIR='$OSMIR'
OSREL='$OSREL'
OSTYP='$OSTYP'
SQCMD='$SQCMD'
SQDNS='$SQDNS'
TAREA='$TAREA'
TCITY='$TCITY'
UPASS='$UPASS'
UPATH='$UPATH'
UUSER='$UUSER'
U_GID='$U_GID'
U_SHL='$U_SHL'
U_UID='$U_UID'
VHOST='$VHOST'
VPATH='$VPATH'
VUSER='$VUSER'
V_PHP='$V_PHP'
WPASS='$WPASS'
WPATH='$WPATH'
WPUSR='$WPUSR'
WUGID='$WUGID'"
}

getusers ()
{
    getent passwd | awk -F: '{if ($3 > 999 && $3 < 65534) print}'
}

getuser ()
{
    echo "\
UUSER=$UUSER
U_UID=$U_UID
U_GID=$U_GID
VHOST=$VHOST
UPATH=$UPATH
U_SHL=$U_SHL"
}

go2 ()
{
    if [[ $1 =~ "@" ]]; then
        cd /home/u/${1#*@}*/home/*${1%@*}
    else
        cd /home/u/$1*/var/www
    fi
}

grepuser ()
{
    getusers | grep -E "$1[,:]"
}

newuid ()
{
    local uid=$(($(getusers | cut -d: -f3 | sort -n | tail -n1) + 1))
    [[ $uid == 1 ]] && echo 1000 || echo $uid
}

getdb ()
{
    echo $SQCMD
}

sanitize_fqdn ()
{
    if [[ ${1%%.*} == ${1#*.} ]]; then
        HNAME=$1
        HDOMN='local'
    else
        HNAME=${1%%.*}
        HDOMN=${1#*.}
    fi

    if [[ $HNAME == mail && $HDOMN == local ]]; then
        VHOST=netserva.$HDOMN
        MHOST=$HNAME.$VHOST
    elif [[ $HNAME == mail ]]; then
        VHOST=$HDOMN
        MHOST=$HNAME.$HDOMN
    else
        VHOST=$HNAME.$HDOMN
        MHOST=$HNAME.$HDOMN
    fi

    export HNAME HDOMN VHOST MHOST
}

setdistro ()
{
    V_PHP='8.1'
    CIMAP='/etc/dovecot'
    CSMTP='/etc/postfix'
    C_DNS='/etc/powerdns'
    C_FPM="/etc/php/$V_PHP/fpm"
    C_SQL='/etc/mysql'
    C_SSL='/etc/ssl'
    C_WEB='/etc/nginx'
    OSMIR='archive.ubuntu.com'
    OSREL=${OSREL:-'jammy'}
    WUGID='www-data'

    # OS dependant overrides
    if [[ $OSTYP == alpine ]]; then
        V_PHP='8'
        C_DNS='/etc/pdns'
        C_DNS='/etc/pdns'
        C_FPM="/etc/php$V_PHP"
        C_SQL='/etc/my.cnf.d'
        OSMIR='nl.alpinelinux.org'
        OSREL=${OSREL:-'edge'}
        WUGID='nginx'
    elif [[ $OSTYP == debian ]]; then
        OSMIR='ftp.debian.org'
        OSREL=${OSREL:-'bullseye'}
    elif [[ $OSTYP == manjaro ]]; then
        C_DNS='/etc/powerdns'
        C_FPM='/etc/php'
        C_SQL='/etc/my.cnf.d'
        OSMIR='manjaro.moson.eu'
        OSREL=${OSREL:-'stable'}
        WUGID='http'
    elif [[ $OSTYP == openwrt ]]; then
        echo "TODO: add settings for OpenWrt"
    fi
}

setuser ()
{
    local U_TMP=$(grepuser "$1")
    [[ $U_TMP && (($(grep -c . <<<"$U_TMP") != 1)) ]] && echo "Ambiguous result for '$1'" && return 10
    UUSER=$(echo $U_TMP | cut -d: -f1)
    U_UID=$(echo $UUSER | cut -d: -f3)
    U_GID=$(echo $UUSER | cut -d: -f4)
    VHOST=$(echo $UUSER | cut -d: -f5)
    UPATH=$(echo $UUSER | cut -d: -f6)
    U_SHL=$(echo $UUSER | cut -d: -f7)
}

sethost ()
{
    if [[ -z $1 || $1 =~ -h ]]; then
        echo "Usage: sethost uuser@domain|domain [(mysql)|sqlite] [distro($OSREL)] [IP]"
        return 1
    elif [[ $1 =~ "@" ]]; then
        UUSER=${1%@*}
        _FQDN=${1#*@}
        if [[ $UUSER == u* ]]; then
            U_UID=${UUSER#*u}
        else
            [[ $A_UID ]] && U_UID=$A_UID || U_UID=1000
        fi
    else
        _FQDN=$1
        U_UID=$(newuid)
        UUSER=$([[ $U_UID = 1000 ]] && echo "sysadm" || echo "u$U_UID")
    fi

    sanitize_fqdn $_FQDN

    # Global static shell variables (default to ubuntu)
    ADMIN='sysadm'
    ANAME='System Administrator'
    A_GID='1000'
    A_UID='1000'
    BPATH='/home/backups'
    DBMYS='/var/lib/mysql'
    DBSQL='/var/lib/sqlite'
    DHOST='localhost'
    DPORT='3306'
    DTYPE=${DTYPE:-'mysql'}
    LROOT='/usr/local/lsws'
    TAREA='Australia'
    TCITY='Sydney'
    VPATH='/home/u'

    setdistro

    U_GID=$U_UID

    [[ $UUSER == $ADMIN ]] && DNAME=$ADMIN || DNAME=${VHOST//[.-]/_}

    if [[ -z $4 ]]; then
        IP4_0=$(ip -4 route get 1.1.1.1 | awk '/src/ {print $7}')
    elif [[ $4 =~ "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$" ]]; then
        IP4_0=$4
    else
        IP4_0=$(hostname -i | cut -d ' ' -f -1)
    fi

    DPATH="$DBSQL/$ADMIN/$ADMIN.db"
    EXMYS="mysql -BN $ADMIN"
    EXSQL="sqlite3 $DPATH"

    if [[ $DTYPE == mysql ]]; then
        SQCMD=$EXMYS
        SQDNS="mysql -BN pdns"
    elif [[ $DTYPE == sqlite ]]; then
        SQCMD=$EXSQL
        SQDNS="sqlite3 $DBSQL/$ADMIN/pdns.db"
    else
        echo "!!! ERROR: unknown database type '$DTYPE'"
    fi

    # was pwgen -sB 16 1
    APASS=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c16)
    DPASS=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c16)
    EPASS=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c16)
    UPASS=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c16)
    WPASS=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c16)

    AHOST=$(hostname -f | tr 'A-Z' 'a-z')

    DUSER=$UUSER
    MPATH=$VPATH/$VHOST/home
    UPATH=$VPATH/$VHOST
    U_SHL=$([[ $U_UID = 1000 ]] && echo "/bin/bash" || echo "/bin/sh")
    VUSER='admin'
    WPATH=$VPATH/$VHOST/var/www
    WPUSR=$(head /dev/urandom | tr -dc a-z | head -c6)
    [[ $VHOST == $AHOST ]] && TEMPH=${VHOST#*.} || TEMPH=$VHOST
    AMAIL="$VUSER@$TEMPH"
}

sx ()
{
    [[ -z $2 || $1 =~ -h ]] &&
        echo "Usage: sx host command (host must be in ~/.ssh/config)" && return 1
    local _HOST=$1
    shift
    ssh $_HOST -q -t "bash -ci '$@'"
}

updhost ()
{
    if [[ -z $1 || $1 =~ -h ]]; then
        echo "Usage: updhost vhost [(mysql)|sqlite] [distro($OSREL)] [IP] [V_PHP]"
        return 1
    fi

    if [[ -f /root/.vhosts/$1 ]]; then
        . /root/.vhosts/$1
    else
        echo "ERROR: /root/.vhosts/$1 does not exist" && return 2
    fi

    sanitize_fqdn $1

    DTYPE=${2:-$DTYPE}
    OSREL=${3:-$OSREL}
    IP4_0=${4:-$(hostname -i | cut -d ' ' -f -1)}
    V_PHP=${5:-$V_PHP}
    LROOT="/usr/local/lsws"
    OSTYP=$OSTYP
    C_FPM="/etc/php/$V_PHP/fpm"

    setdistro

    if [[ $DTYPE == mysql ]]; then
        SQCMD=$EXMYS
        SQDNS="mysql -BN pdns"
    elif [[ $DTYPE == sqlite ]]; then
        SQCMD=$EXSQL
        SQDNS="sqlite3 $DBSQL/$ADMIN/pdns.db"
    else
        echo "!!! ERROR: unknown database type '$DTYPE'"
    fi
    gethost >/root/.vhosts/$1
}

export -f chktime f gethost getuser getusers go2 grepuser newuid sanitize_fqdn setdistro sethost setuser sc sx updhost
