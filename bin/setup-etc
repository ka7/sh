#!/usr/bin/env bash
# .sh/bin/setup-etc 20151231 - 20210112
# Copyright (C) 1995-2021 Mark Constable <markc@renta.net> (AGPL-3.0)

[[ $1 =~ '-h' ]] && echo "Usage: setup-etc [mysql(default)|sqlite]" && exit 1

[[ $(id -u) -gt 0 ]] && echo "ERROR: must be root (use sudo -i)" && exit 2

source /root/.shrc || exit 3

# Temporary self-signed SSL certificate defaults
C="AU"
ST="QLD"
L="GoldCoast"
O="NetServa"
OU="IT Department"

if [[ $DTYPE == sqlite ]]; then
    SQCMD=$EXSQL
elif [[ $DTYPE == mysql ]]; then
    SQCMD=$EXMYS
else
    echo "ERROR: unknown argument DTYPE='$DTYPE'" && exit 2
fi

### Create missing directories

# For Alpine
if [[ ! -d $C_WEB/sites-enabled ]]; then
    echo "Create $C_WEB/sites-enabled"
    mkdir $C_WEB/sites-enabled
fi

if [[ ! -d /etc/opendkim ]]; then
    echo "Create /etc/opendkim"
    # mkdir and move to opendkim section
    dkim list
fi

if [[ ! -d $CIMAP/vhosts ]]; then
    echo "Create $CIMAP/vhosts"
    mkdir $CIMAP/vhosts
fi

if [[ ! -d $CIMAP/sieve ]]; then
    echo "Create $CIMAP/sieve"
    mkdir $CIMAP/sieve
fi

# For stock ubuntu install, replace with sysadm
if [[ -n $(grep ^ubuntu /etc/passwd) ]]; then
    echo "Remove default ubuntu user"
    userdel -rf ubuntu > /dev/null 2>&1
fi

### postfix

if [[ ! -f $CSMTP/main.cf.orig ]]; then
    echo "Create $CSMTP/main.cf for $DTYPE"
    mv $CSMTP/main.cf $CSMTP/main.cf.orig

    sed -e "s/_VHOST/$VHOST/" -e "s/^#myhostname = _MHOST/myhostname = $MHOST/" \
        ~/.sh/etc/_etc_postfix_main.cf > $CSMTP/main.cf

    if [[ $DTYPE == sqlite ]]; then
        echo "Append SQLite details to $CSMTP/main.cf"
        cat ~/.sh/etc/_etc_postfix_main_sqlite.cf >> $CSMTP/main.cf
    elif [[ $DTYPE == mysql ]]; then
        echo "Append MySQL details to $CSMTP/main.cf"
        cat ~/.sh/etc/_etc_postfix_main_mysql.cf >> $CSMTP/main.cf
    fi

    echo "/^Subject:/      WARN" > $CSMTP/header_checks

    chmod 644 $CSMTP/main.cf $CSMTP/header_checks
fi

if [[ ! -f $CSMTP/master.cf.orig ]]; then
    echo "Create $CSMTP/master.cf"
    mv $CSMTP/master.cf $CSMTP/master.cf.orig
    cp ~/.sh/etc/_etc_postfix_master.cf $CSMTP/master.cf
    chmod 644 $CSMTP/master.cf
fi

if [[ $DTYPE == sqlite ]]; then
    if [[ ! -f $CSMTP/sqlite-alias-maps.cf ]]; then
        echo "Create $CSMTP/sqlite-alias-maps.cf"
        sed -e "s;_DPATH;$DPATH;" \
            ~/.sh/etc/_etc_postfix_sqlite-alias-maps.cf \
            > $CSMTP/sqlite-alias-maps.cf
    fi
    if [[ ! -f $CSMTP/sqlite-gid-maps.cf ]]; then
        echo "Create $CSMTP/sqlite-gid-maps.cf"
        sed -e "s;_DPATH;$DPATH;" \
            ~/.sh/etc/_etc_postfix_sqlite-gid-maps.cf \
            > $CSMTP/sqlite-gid-maps.cf
    fi
    if [[ ! -f $CSMTP/sqlite-mailbox-domains.cf ]]; then
        echo "Create $CSMTP/sqlite-mailbox-domains.cf"
        sed -e "s;_DPATH;$DPATH;" \
            ~/.sh/etc/_etc_postfix_sqlite-mailbox-domains.cf \
            > $CSMTP/sqlite-mailbox-domains.cf
    fi
    if [[ ! -f $CSMTP/sqlite-mailbox-maps.cf ]]; then
        echo "Create $CSMTP/sqlite-mailbox-maps.cf"
        sed -e "s;_DPATH;$DPATH;" \
            ~/.sh/etc/_etc_postfix_sqlite-mailbox-maps.cf \
            > $CSMTP/sqlite-mailbox-maps.cf
    fi
    if [[ ! -f $CSMTP/sqlite-uid-maps.cf ]]; then
        echo "Create $CSMTP/sqlite-uid-maps.cf"
        sed -e "s;_DPATH;$DPATH;" \
            ~/.sh/etc/_etc_postfix_sqlite-uid-maps.cf \
            > $CSMTP/sqlite-uid-maps.cf
    fi

elif [[ $DTYPE == mysql ]]; then

    if [[ ! -f $CSMTP/mysql-alias-maps.cf ]]; then
        echo "Create $CSMTP/mysql-alias-maps.cf"
        sed -e "s/_DHOST/$DHOST/" -e "s/_DNAME/$ADMIN/" \
            -e "s/_DUSER/$ADMIN/" -e "s/_DPASS/$DPASS/" \
            ~/.sh/etc/_etc_postfix_mysql-alias-maps.cf \
            > $CSMTP/mysql-alias-maps.cf
    fi
    if [[ ! -f $CSMTP/mysql-gid-maps.cf ]]; then
        echo "Create $CSMTP/mysql-gid-maps.cf"
        sed -e "s/_DHOST/$DHOST/" -e "s/_DNAME/$ADMIN/" \
            -e "s/_DUSER/$ADMIN/" -e "s/_DPASS/$DPASS/" \
            ~/.sh/etc/_etc_postfix_mysql-gid-maps.cf \
            > $CSMTP/mysql-gid-maps.cf
    fi
    if [[ ! -f $CSMTP/mysql-mailbox-domains.cf ]]; then
        echo "Create $CSMTP/mysql-mailbox-domains.cf"
        sed -e "s/_DHOST/$DHOST/" -e "s/_DNAME/$ADMIN/" \
            -e "s/_DUSER/$ADMIN/" -e "s/_DPASS/$DPASS/" \
            ~/.sh/etc/_etc_postfix_mysql-mailbox-domains.cf \
            > $CSMTP/mysql-mailbox-domains.cf
    fi
    if [[ ! -f $CSMTP/mysql-mailbox-maps.cf ]]; then
        echo "Create $CSMTP/mysql-mailbox-maps.cf"
        sed -e "s/_DHOST/$DHOST/" -e "s/_DNAME/$ADMIN/" \
            -e "s/_DUSER/$ADMIN/" -e "s/_DPASS/$DPASS/" \
            ~/.sh/etc/_etc_postfix_mysql-mailbox-maps.cf \
            > $CSMTP/mysql-mailbox-maps.cf
     fi
     if [[ ! -f $CSMTP/mysql-uid-maps.cf ]]; then
        echo "Create $CSMTP/mysql-uid-maps.cf"
        sed -e "s/_DHOST/$DHOST/" -e "s/_DNAME/$ADMIN/" \
            -e "s/_DUSER/$ADMIN/" -e "s/_DPASS/$DPASS/" \
            ~/.sh/etc/_etc_postfix_mysql-uid-maps.cf \
            > $CSMTP/mysql-uid-maps.cf
     fi
fi

### dovecot

if [[ ! -f $CIMAP/dovecot.conf.orig ]]; then
    echo "Create $CIMAP/dovecot.conf for $DTYPE"
    mv -f $CIMAP/dovecot.conf $CIMAP/dovecot.conf.orig

    sed -e "s/_VHOST/$VHOST/" \
        ~/.sh/etc/_etc_dovecot_dovecot.conf > $CIMAP/dovecot.conf

    if [[ $DTYPE == sqlite ]]; then
        echo "Append SQLite details to $CIMAP/dovecot.conf"
        cat ~/.sh/etc/_etc_dovecot_dovecot.conf-sqlite >> $CIMAP/dovecot.conf
    elif [[ $DTYPE == mysql ]]; then
        echo "Append MySQL details to $CIMAP/dovecot.conf"
        cat ~/.sh/etc/_etc_dovecot_dovecot.conf-mysql >> $CIMAP/dovecot.conf
    fi

    openssl dhparam -dsaparam -out /etc/dovecot/dh.pem 4096  > /dev/null 2>&1
fi

if [[ $DTYPE == sqlite ]]; then

    if [[ ! -f $CIMAP/user-sqlite.conf ]]; then
        echo "Create $CIMAP/user-sqlite.conf"
        sed -e "s;_DTYPE;$DTYPE;" -e "s;_DPATH;$DPATH;" \
            ~/.sh/etc/_etc_dovecot_user-sqlite.conf \
            > $CIMAP/user-sqlite.conf
    fi

elif [[ $DTYPE == mysql ]]; then

    if [[ ! -f $CIMAP/user-mysql.conf ]]; then
        echo "Create $CIMAP/user-mysql.conf"
        sed -e "s/_DTYPE/$DTYPE/" -e "s/_DHOST/$DHOST/" -e "s/_DNAME/$ADMIN/" \
            -e "s/_DUSER/$ADMIN/" -e "s/_DPASS/$DPASS/" \
            ~/.sh/etc/_etc_dovecot_user-mysql.conf \
            > $CIMAP/user-mysql.conf
    fi
fi

### Spamprobe

if [[ -e /usr/bin/spamprobe ]]; then
    if [[ ! -L $CIMAP/sieve/spamprobe ]]; then
        echo "Create $CIMAP/sieve/spamprobe symlink"
        cd $CIMAP/sieve
        ln -s /usr/bin/spamprobe $CIMAP/sieve/spamprobe
    fi

    if [[ ! -f $CIMAP/sieve/retrain-as-good.sieve ]]; then
        echo "*** Create $CIMAP/sieve/retrain-as-good.sieve"
        cp ~/.sh/etc/_etc_dovecot_sieve_retrain-as-good.sieve $CIMAP/sieve/retrain-as-good.sieve
    fi

    if [[ ! -f $CIMAP/sieve/retrain-as-spam.sieve ]]; then
        echo "*** Create $CIMAP/sieve/retrain-as-spam.sieve"
        cp ~/.sh/etc/_etc_dovecot_sieve_retrain-as-spam.sieve $CIMAP/sieve/retrain-as-spam.sieve
    fi

    if [[ ! -f $CIMAP/sieve/global.sieve ]]; then
        echo "*** Create $CIMAP/sieve/global.sieve"
        cp ~/.sh/etc/_etc_dovecot_sieve_global.sieve $CIMAP/sieve/global.sieve
    fi

    if [[ -d $CIMAP/sieve ]]; then
        echo "Create sieve binaries"
        cd $CIMAP/sieve
        sievec global.sieve
        sievec retrain-as-spam.sieve
        sievec retrain-as-good.sieve
        chmod 644 *.svbin
    fi
fi

### nginx

if [[ ! -f $C_WEB/common.conf ]]; then
    echo "Create $C_WEB/common.conf"
    cp ~/.sh/etc/_etc_nginx_common.conf $C_WEB/common.conf
fi

if [[ ! -f $C_WEB/php.conf ]]; then
    echo "Create $C_WEB/php.conf"
    cp ~/.sh/etc/_etc_nginx_php.conf $C_WEB/php.conf
fi

# Not strictly necessary at this point (could be in setup-hcp)
if [[ ! -f $C_WEB/hcp.conf ]]; then
    echo "Create $C_WEB/hcp.conf"
    cp ~/.sh/etc/_etc_nginx_hcp.conf $C_WEB/hcp.conf
fi

if [[ ! -f $C_WEB/headers.conf ]]; then
    echo "Create $C_WEB/headers.conf"
    cp ~/.sh/etc/_etc_nginx_headers.conf $C_WEB/headers.conf
fi

if [[ ! -f $C_WEB/nginx.conf.orig ]]; then
    echo "Create $C_WEB/nginx.conf"
    mv $C_WEB/nginx.conf $C_WEB/nginx.conf.orig
    cp ~/.sh/etc/_etc_nginx_nginx.conf $C_WEB/nginx.conf
fi

if [[ ! -f $C_WEB/sites-enabled/_localhost ]]; then
    echo "Create $C_WEB/sites-enabled/_localhost"
    cp ~/.sh/etc/_etc_nginx_sites-enabled__localhost $C_WEB/sites-enabled/_localhost
fi

if [[ ! -f /etc/sysctl.d/50-nginx-tweaks.conf ]]; then
    echo "Create /etc/sysctl.d/50-nginx-tweaks.conf"
    cat << EOS > /etc/sysctl.d/50-nginx-tweaks.conf
# Auto created by NetServa HCP/SH on $(date +%Y%m%d)
net.core.default_qdisc = fq
net.ipv4.tcp_congestion_control = bbr
net.ipv4.tcp_notsent_lowat = 16384
vm.swappiness = 1
net.core.somaxconn = 512
EOS
    sysctl -p
fi

### opendkim and opendmarc

if [[ ! -f /etc/opendkim.conf.orig ]]; then
    echo "Create /etc/opendkim.conf"
    touch /etc/opendkim.conf.orig
    cp ~/.sh/etc/_etc_opendkim.conf /etc/opendkim.conf
    chown opendkim:opendkim /etc/opendkim.conf
fi

if [[ ! -f /etc/opendmarc.conf.orig ]]; then
    echo "Create /etc/opendmarc.conf"
    touch /etc/opendmarc.conf.orig
    cp ~/.sh/etc/_etc_opendmarc.conf /etc/opendmarc.conf
fi

if [[ ! -f /etc/alpine-release ]]; then

    if [[ ! -f /etc/systemd/system/opendkim.service ]]; then
        echo "Create /etc/systemd/system/opendkim.service"
        cp ~/.sh/etc/_etc_systemd_system_opendkim.service /etc/systemd/system/opendkim.service
        chmod 644 /etc/systemd/system/opendkim.service
    fi

    if [[ ! -f /etc/systemd/system/opendmarc.service ]]; then
        echo "Create /etc/systemd/system/opendmarc.service"
        cp ~/.sh/etc/_etc_systemd_system_opendmarc.service /etc/systemd/system/opendmarc.service
        chmod 644 /etc/systemd/system/opendmarc.service
    fi
fi

### php

if [[ -f /etc/alpine-release ]]; then
    echo "Create $C_FPM/common.conf (TODO)"
    echo "Modify $C_FPM/php.ini (TODO)"
else
    if [[ ! -f $C_FPM/common.conf ]]; then
        echo "Create $C_FPM/common.conf"
        cp ~/.sh/etc/_etc_php_7.0_fpm_common.conf $C_FPM/common.conf
    fi

    if [[ ! -f $C_FPM/php.ini.orig ]]; then
        echo "Modify $C_FPM/php.ini"
        cp $C_FPM/php.ini $C_FPM/php.ini.orig
        sed -i $C_FPM/php.ini \
            -e 's/;opcache.enable=1/opcache.enable=1/' \
            -e 's/;opcache.enable_cli=0/opcache.enable_cli=1/' \
            -e 's/;opcache.interned_strings_buffer=8/opcache.interned_strings_buffer=8/' \
            -e 's/;opcache.max_accelerated_files=10000/opcache.max_accelerated_files=10000/' \
            -e 's/;opcache.memory_consumption=128/opcache.memory_consumption=128/' \
            -e 's/;opcache.save_comments=1/opcache.save_comments=1/' \
            -e 's/;opcache.revalidate_freq=2/opcache.revalidate_freq=1/' \
            -e 's/memory_limit = 128M/memory_limit = 512M/'
    fi
fi

### pdns

if [[ ! -f $C_DNS/pdns.conf.orig ]]; then
    echo "Create $C_DNS/pdns.conf"
    mv $C_DNS/pdns.conf $C_DNS/pdns.conf.orig
    #    cp ~/.sh/etc/_etc_powerdns_pdns.conf $C_DNS/pdns.conf
    sed "s/0\.0\.0\.0/$IP4_0/" \
        ~/.sh/etc/_etc_powerdns_pdns.conf \
        > $C_DNS/pdns.conf
    if [[ $DTYPE == mysql ]]; then
        echo "Create $C_DNS/pdns.d/mysql.conf"
        sed -e "s/_PDNS_USER/$DUSER/" -e "s/_PDNS_PASS/$DPASS/" \
            ~/.sh/etc/_etc_powerdns_pdns_mysql.conf \
            > $C_DNS/pdns.d/mysql.conf
    elif [[ $DTYPE == sqlite ]]; then
        echo "Create $C_DNS/pdns.d/sqlite.conf"
        cp ~/.sh/etc/_etc_powerdns_pdns_sqlite.conf $C_DNS/pdns.d/sqlite.conf
    fi
fi

### CRON

if [[ -f /etc/alpine-release ]]; then
    if [[ ! -f /etc/etc/periodic/daily/netserva ]]; then
        echo "Create /etc/etc/periodic/daily/netserva"
        cp ~/.sh/etc/_etc_cron.d_netserva /etc/etc/periodic/daily/netserva
        MTEMP=${MAILTO:-$AMAIL}
        sed -i "s/_MAILTO/$MTEMP/" /etc/etc/periodic/daily/netserva
    fi
else
    if [[ ! -f /etc/cron.d/netserva ]]; then
        echo "Create /etc/cron.d/netserva"
        cp ~/.sh/etc/_etc_cron.d_netserva /etc/cron.d/netserva
        MTEMP=${MAILTO:-$AMAIL}
        sed -i "s/_MAILTO/$MTEMP/" /etc/cron.d/netserva
    fi
fi

if [[ ! -f /etc/sudoers.d/99-sysadm ]]; then
    echo "Create /etc/sudoers.d/99-sysadm"
    cp ~/.sh/etc/_etc_sudoers.d_99-sysadm /etc/sudoers.d/99-sysadm
    chmod 0440 /etc/sudoers.d/99-sysadm
fi

### SSH

if [[ ! -f /etc/ssh/sshd_config.orig ]]; then
    echo "Create new /etc/ssh/sshd_config"
    mv /etc/ssh/sshd_config /etc/ssh/sshd_config.orig
    cp ~/.sh/etc/_etc_ssh_sshd__config /etc/ssh/sshd_config
fi

if [[ ! -f $C_SSL/dhparams.pem ]]; then
    echo "Create dhparams.pem"
    openssl dhparam -dsaparam -out $C_SSL/dhparams.pem 4096 > /dev/null 2>&1
fi

if [[ ! -f $C_WEB/sites-enabled/_default ]]; then
    echo "Create generic Port 80 nginx default config"
    [[ -h $C_WEB/sites-enabled/default ]] && rm $C_WEB/sites-enabled/default
    cp ~/.sh/etc/_etc_nginx_sites-enabled__default $C_WEB/sites-enabled/_default
    sed -i $C_WEB/sites-enabled/_default -e "s/_MHOST/$MHOST/g"
fi

if [[ ! -d $C_SSL/$VHOST ]]; then
    echo "Create temporary self-signed certificate for $VHOST"
    [[ ! -d $C_SSL/$VHOST ]] && mkdir $C_SSL/$VHOST
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -subj "/C=$C/ST=$ST/L=$L/O=$O/OU=$OU/CN=$VHOST" \
        -keyout /etc/ssl/$VHOST/privkey.pem \
        -out /etc/ssl/$VHOST/fullchain.pem > /dev/null 2>&1

    if [[ ! -f $C_WEB/sites-enabled/$VHOST.selfsigned ]]; then
        cat << EOS | tee $C_WEB/sites-enabled/$VHOST.selfsigned > /dev/null
server {
    listen                      443 ssl http2;
    server_name                 $VHOST;
    set                         \$domain $VHOST;
    include                     /etc/nginx/hcp.conf;
    include                     /etc/nginx/common.conf;
    ssl_certificate             $C_SSL/$VHOST/fullchain.pem;
    ssl_certificate_key         $C_SSL/$VHOST/privkey.pem;
    ssl_stapling                off;
    ssl_stapling_verify         off;
}
EOS
    fi
fi

# Missing from Ubuntu nginx installation
if [[ ! -f /usr/share/nginx/html/50x.html ]]; then
    echo "Create /usr/share/nginx/html/50x.html"
    [[ ! -d /usr/share/nginx/html ]] && mkdir -p /usr/share/nginx/html
    cp ~/.sh/etc/_usr_share_nginx_html_50x.html /usr/share/nginx/html/50x.html
    chmod 644 /usr/share/nginx/html/50x.html
fi

addvip $MHOST $IP4_0

if [[ -f /etc/alpine-release ]]; then
    # restart alpine services
    echo "restart alpine services"
else
    systemctl daemon-reload > /dev/null 2>&1

    systemctl restart ssh
    systemctl enable opendkim > /dev/null 2>&1
    systemctl restart opendkim
    systemctl enable opendmarc > /dev/null 2>&1
    systemctl restart opendmarc

    serva restart web
    serva restart mail
fi

#systemd-cat -t hlog echo "$(whoami) $(basename $0) $*"
