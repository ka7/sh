#!/usr/bin/env bash
# .sh/bin/setup-host 20170524 - 20210415
# Copyright (C) 1995-2021 Mark Constable <markc@renta.net> (AGPL-3.0)

[[ $1 =~ '-h' ]] && \
  echo "Usage: setup-host [fqdn] [(mysql)|sqlite]" && exit 1

[[ $(id -u) -gt 0 ]] && echo "ERROR: must be root (use sudo -i)" && exit 2

VHOST=${1:-$VHOST}
DTYPE=${2:-$DTYPE}

if [[ -f ~/.shrc ]]; then
    . ~/.shrc
else
    if [[ -f /etc/os-release ]]; then
        OSTYP=$(awk -F= '/^ID=/ {print $2}' /etc/os-release)
    else
        OSTYP=unknown
    fi
fi

if [[ $OSTYP == alpine ]]; then

    echo "### Install Alpine base packages"

    OSMIR=nl.alpinelinux.org
    OSREL=edge
    V_PHP=8

    ALIST="bash bc busybox-static ca-certificates curl db dovecot
dovecot-lmtpd dovecot-sqlite ebtables fcgiwrap gawk git iputils jq msmtp
msmtp mtr nano nginx opendkim opendkim-utils pdns php$V_PHP
php$V_PHP-curl php$V_PHP-fpm php$V_PHP-gd php$V_PHP-imap
php$V_PHP-opcache php$V_PHP-pdo php$V_PHP-pdo_sqlite
php$V_PHP-pecl-redis php$V_PHP-posix php$V_PHP-session
php$V_PHP-simplexml postfix postfix-pcre postfix-policyd-spf-perl
postfix-sqlite pwgen redis rsync s-nail sqlite sudo wget which whois"

    MLIST="mariadb mariadb-client"

    if [[ ! -f /etc/apk/repositories.orig ]]; then
        echo "### Update /etc/apk/repositories with $OSREL"
        mv /etc/apk/repositories /etc/apk/repositories.orig
        cat << EOS > /etc/apk/repositories
https://$OSMIR/alpine/$OSREL/main
https://$OSMIR/alpine/$OSREL/testing
https://$OSMIR/alpine/$OSREL/community
EOS
        apk update && apk upgrade
        apk add $ALIST

        if [[ $DTYPE == mysql ]]; then
            echo "### Install mariabdb packages"
            apk add $MLIST
            /etc/init.d/mariadb setup
            rc-service mariadb start
        fi
    fi

elif [[ -f /etc/pacman.conf ]]; then

    echo "### Install Arch/Manjaro base packages"

    # Default List of required core Netserva Arch/Manjaro packages
    DLIST="bash bc inetutils s-nail busybox ca-certificates curl db
dovecot ebtables fcgiwrap gawk git iptables iputils jq libxml2 mailgraph
msmtp mtr mutt nano net-tools nginx-mainline opendkim opendmarc powerdns
pflogsumm php php-fpm php-gd php-imap php-intl php-sqlite php-imagick
php-redis perl-mail-spf postfix pwgen redis rsync roundcubemail sqlite
sudo time minizip wget which whois"

    MLIST="mariadb mariadb-clients"

    pacman -Syu
    pacman -S $DLIST --needed --noconfirm
    [[ $DTYPE == mysql ]] && pacman -S $MLIST --needed --noconfirm
    pacman -Qsq python | pacman -Rcns --noconfirm -

elif [[ -f /etc/apt/sources.list ]]; then

    echo "### Install Debian/Ubuntu base packages"

    if [[ $OSTYP == debian ]]; then
        OSMIR=ftp.debian.org
        OSREL=buster
        V_PHP=7.4
    else
        OSMIR=archive.ubuntu.com
        OSREL=focal
        V_PHP=7.4
    fi

    # Default List of required core Netserva Debian packages
    DLIST="apache2-utils apt-utils bash bc bind9-host bsd-mailx
busybox-static ca-certificates curl db5.3-util deborphan dnsutils
dovecot-imapd dovecot-lmtpd dovecot-managesieved dovecot-sqlite ebtables
fcgiwrap gawk git iptables iputils-ping jq libxml2-utils mailgraph msmtp
mtr-tiny mutt nano net-tools nginx-light opendkim opendkim-tools
opendmarc openssh-server pdns-backend-sqlite3 pflogsumm php$V_PHP
php$V_PHP-bcmath php$V_PHP-curl php$V_PHP-fpm php$V_PHP-gd php$V_PHP-gmp
php$V_PHP-imap php$V_PHP-intl php$V_PHP-mbstring php$V_PHP-soap
php$V_PHP-sqlite3 php$V_PHP-xml php$V_PHP-xmlrpc php$V_PHP-zip
php-imagick php-redis postfix postfix-lmdb postfix-policyd-spf-perl
postfix-sqlite pwgen redis-server rsyslog rsync sqlite3 sudo time unzip
wget whois"

    # Mysql List of packages (not need if using SQLite)
    MLIST="dovecot-mysql mariadb-common mariadb-client mariadb-server
pdns-backend-mysql php$V_PHP-mysql postfix-mysql"

    [[ $OSREL == focal ]] && MLIST="$MLIST mariadb-client-10.3 mariadb-server-10.3"

    # Remove List of packages (RLIST="" to ignore removal)
    RLIST="*golang* *python* accountsservice apache2 at bind9 cloud*
install-info lxcfs man* open-iscsi rpcbind sasl2-bin ttf-*
ubuntu-advantage-tools vi* xinetd"

    # Make sure that IP4 is the default
    grep -q '^#precedence ::ffff:0:0/96  100' /etc/gai.conf
    if [[ $? -eq 0 ]]; then
        echo "### Warning: giving preference to IPv4 (IPv6 is Ubuntu default)"
        sed -i 's;#precedence ::ffff:0:0/96  100;precedence ::ffff:0:0/96  100;' /etc/gai.conf
    fi

    if [[ ! -f /etc/apt/apt.conf.d/20local ]]; then
        echo "### Create /etc/apt/apt.conf.d/20local"
        cp ~/.sh/etc/_etc_apt_apt.conf.d_20local /etc/apt/apt.conf.d/20local
    fi

    if [[ ! -f /etc/apt/sources.list.orig ]]; then
        export DEBIAN_FRONTEND=noninteractive
        export TERM=linux

        echo "### Setup apt sources list for $OSREL"
        mv /etc/apt/sources.list /etc/apt/sources.list.orig
        if [[ $OSTYP == debian ]]; then
            cat << EOS > /etc/apt/sources.list
deb http://$OSMIR/debian/ $OSREL main
deb http://$OSMIR/debian/ $OSREL-updates main
deb http://security.debian.org/debian-security $OSREL/updates main
EOS
        else
            sed ~/.sh/etc/_etc_apt_sources.list \
            -e "s/_OSMIR/$OSMIR/" -e "s/_OSREL/$OSREL/" > /etc/apt/sources.list
        fi

        cat << EOS | debconf-set-selections
postfix postfix/destinations string 'localhost'
postfix postfix/mailname string 'localhost'
postfix postfix/main_mailer_type string 'Internet Site'
EOS

        echo "### Create key for bionic (18.04) repo"
        apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 3B4FE6ACC0B21F32 > /dev/null 2>&1

        echo "### Create key for openlitespeed repo"
        apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 011AA62DEDA1F085 > /dev/null 2>&1

        echo "### Update package list for $OSREL, patience please..."
        apt-get -yqq update > /dev/null

        echo "### Upgrade packages for $OSREL, more patience..."
        apt-get -yqq -u dist-upgrade > /dev/null

        echo "### Install default package set, yet more patience..."
        apt-get -yqq install $DLIST > /dev/null

        if [[ $DTYPE == mysql ]]; then
            echo "### Install MYSQL package set, even more patience..."
            apt-get -yqq install $MLIST > /dev/null

            echo "### Change Mysql to utf8 otherwise pdns tables will not install"
            sed -i /etc/mysql/mariadb.conf.d/50-server.cnf \
            -e "/^character-set-server/ s/utf8mb4/utf8/" \
            -e "/^collation-server/ s/utf8mb4_general_ci/utf8_general_ci/"
        fi

        echo "### Disable pdns until actually needed"
        sc stop pdns > /dev/null 2>&1
        sc disable pdns > /dev/null 2>&1

        echo "### Install bionic spamprobe (the focal+ spamprobe crashes)"
        apt-get -yqq install spamprobe=1.4d-14build1 > /dev/null
        apt-mark hold spamprobe > /dev/null
    fi

    if [[ -f /usr/bin/python3 && ! -d /usr/share/xsessions ]]; then
        if [[ -f /usr/share/unattended-upgrades/unattended-upgrade-shutdown ]]; then
            echo "### Remove unattended-upgrades"
            sc stop unattended-upgrades > /dev/null 2>&1
            sc disable unattended-upgrades > /dev/null 2>&1
        fi
        echo "### Remove python and all related packages"
        apt-get -yqq --purge remove $RLIST > /dev/null
    fi
fi

# Git is now available so install the SH scripts, if not already

if [[ ! -d /root/.sh ]]; then
    echo "### Setup NetServa SH scripts"
    cd && git clone -q https://github.com/netserva/sh .sh
    /root/.sh/bin/shm install
    /root/.sh/bin/shm perms
    git config --global pull.rebase false
fi

. ~/.shrc || exit 3

[[ ! -d $VPATH ]] && echo "### Create $VPATH" && mkdir -p $VPATH

if [[ ! -f /etc/ssh/sshd_config.orig ]]; then
    echo "### Create new /etc/ssh/sshd_config"
    mv /etc/ssh/sshd_config /etc/ssh/sshd_config.orig
    cp /root/.sh/etc/_etc_ssh_sshd__config /etc/ssh/sshd_config
    sc restart sshd
fi

if [[ ! -d /root/.ssh ]]; then
    echo "### Create host /root/.ssh dir"
    mkdir /root/.ssh
    chmod 700 /root/.ssh
fi

if [[ ! -f /root/.ssh/config ]]; then
    echo "### Create host /root/.ssh/config"
    cp ~/.sh/etc/_.ssh_config ~/.ssh/config
    chmod 600 /root/.ssh/*
fi

# If we are NOT on a systemd system (ie; Alpine)

if [[ $OSTYP == alpine ]]; then
    if [[ ! -f /etc/resolv.conf.orig ]]; then
        mv /etc/resolv.conf /etc/resolv.conf.orig
        echo "### Change /etc/resolv.conf to 1.1.1.1 (static)"
        cat << EOS | tee /etc/resolv.conf > /dev/null
nameserver 1.1.1.1
nameserver 8.8.8.8
EOS
    fi
else
    [[ ! -d /etc/systemd/network ]] && mkdir /etc/systemd/network

    if [[ $(ls -A /etc/systemd/network/*.network > /dev/null 2>&1) ]]; then
        echo "### /etc/systemd/network/*.network already exists"
    else
        echo "### Create /etc/systemd/network/10-dhcp.network"
        cp ~/.sh/etc/_etc_systemd_network_10-dhcp.network /etc/systemd/network/10-dhcp.network
        chmod 644 /etc/systemd/network/10-dhcp.network
        sc enable systemd-networkd > /dev/null 2>&1
    fi

# TODO: we actually do want the 127.0.0.53 stub DNS resolver
#    if [[ /etc/resolv.conf -ef /run/systemd/resolve/stub-resolv.conf ]]; then
#        echo "### Change /etc/resolv.conf to 1.1.1.1 (systemd)"
#        cd /etc && rm resolv.conf && ln -s ../run/systemd/resolve/resolv.conf
#        sed -i /etc/systemd/resolved.conf \
#            -e 's/^#DNS=.*/DNS=1.1.1.1 8.8.8.8/' \
#            -e 's/^#FallbackDNS=.*/FallbackDNS=1.0.0.1 8.8.4.4/'
#        sc restart systemd-resolved
fi

if [[ ! -f /etc/sysctl.d/50-nginx-tweaks.conf ]]; then
    echo "### Create /etc/sysctl.d/50-nginx-tweaks.conf"
    cat << EOS > /etc/sysctl.d/50-nginx-tweaks.conf
# Auto created by NetServa HCP/SH on $(date +%Y%m%d)
net.core.default_qdisc = fq
net.ipv4.tcp_congestion_control = bbr
net.ipv4.tcp_notsent_lowat = 16384
vm.swappiness = 1
net.core.somaxconn = 512
EOS
    sysctl -p > /dev/null
fi
