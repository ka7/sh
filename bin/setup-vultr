#!/usr/bin/env bash
# .sh/bin/setup-vultr 20180619 - 20201018
# Copyright (C) 1995-2020 Mark Constable <markc@renta.net> (AGPL-3.0)

# First obtain your API key from your account section at https://my.vultr.common
# Add "export VULTR_API_KEY=YOUR_API_KEY" to ~/.myrc (use the es alias)

[[ -z $VULTR_API_KEY ]] && echo "ERROR: missing or empty VULTR_API_KEY" && exit 1

# Then register your startup script and sshkey before going any further.
# Add the below snippet between the dashes (remove the initial #) as a
# Startup Script. Use "vultr scripts" to get the SCRIPTID, add to VARG5.
#
#------------------------------------------------
##!/bin/sh
#export HOME=/root
#sleep 15
#cd
#git clone -q https://github.com/netserva/sh .sh
#.sh/bin/shm install > /dev/null
#source .shrc
#shm perms
#export MAILTO=YOUR_NOTIFICATION_EMAIL_ADDRESS
#setup-all
#------------------------------------------------
#
# Use "ssh-keygen -f ~/.ssh/vultr -N ''" and add ~/.ssh/vultr.pub to your
# Vultr account, then use "vultr sshkeys" to get the SSHKEYID, add to VARG2.
# Make sure your local private SSH key matches the public SSH key at Vultr.

MYKEY="$HOME/.ssh/vultr"

# After about 10 minutes you should be able to use this to acces the server
# ssh -p9 -i ~/.ssh/YOUR_SSHKEY root@YOUR_NEW_FQDN_HOSTNAME (or IP)
#
# This is a very handy alias, add it to ~/.myrc (use "es")
# alias lv='vultr servers | awk "{printf \"%-8s %-32s %-16s\n\", \$1, \$4, \$3}"'

if [[ ! -f /usr/local/bin/vultr ]]; then
    cd /tmp
    wget -q https://github.com/JamesClonk/vultr/releases/download/1.15.0/vultr_1.15.0_Linux-64bit.tar.gz
    tar xf vultr_1.15.0_Linux-64bit.tar.gz
    sudo mv vultr /usr/local/bin/vultr
    echo "Looks like a first time setup, get you API key and setup SCRIPTID/SSHKEYID at https://my.vultr.com"
    exit 2
fi

# -n  Name of new virtual machine
# -r  Region (DCID)                          19  = Sydney
# -p  Plan (VPSPLANID)                       202 = 2GB Ram
# -k  SSH key to apply (SSHKEYID)
# -s  Script to execute on boot (SCRIPTID)
# -o  Operating system (OSID)                270 = Ubuntu 18.04
# --hostname=host.domain.name (same as -n)

[[ -z $1 || $1 =~ -h ]] &&
    echo "Usage: setup-vultr hostname.domain.name [regionid] [planid] [sshkeyid] [scriptid] [osid]" && exit 1

AHOST=$1
# Change these defaults below for your preferred plan and region etc
VARG2=${2:-'19'}
VARG3=${3:-'202'}
VARG4=${4:-'5951b68883517'}
VARG5=${5:-'69340'}
VARG6=${6:-'270'}

_HOST=${AHOST%%.*} # hostname
VHOST=${AHOST#*.*} # domain.name
LECFG="$HOME/.dehydrated"
DOSSH="ssh -l root -p9 -i $MYKEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
C_SSL='/etc/ssl'
C_WEB='/etc/nginx'
NS1IP='173.199.96.96'
NS2IP='173.199.96.97'

vultr servers | grep -q $AHOST
[[ $? -eq 0 ]] && echo "ERROR: $AHOST already exists" && exit 4

echo "Create server instance for $AHOST"
vultr server create -n $AHOST -r $VARG2 -p $VARG3 -k $VARG4 -s $VARG5 -o $VARG6 --hostname=$AHOST --notify-activate=false >/dev/null 2>&1

echo "Wait 15 seconds for server to become active"
sleep 15

VULTR=($(vultr servers | awk '/'$AHOST'/ {printf $1" "$3}'))
SUBID=${VULTR[0]}
IP4_0=${VULTR[1]}
echo "Server IP is $IP4_0 and SUBID is $SUBID"

vultr dns domain list | grep -q $VHOST
if [[ $? -eq 0 ]]; then
    echo "Delete old DNS records for $VHOST"
    vultr dns domain delete -d $VHOST
fi

#echo "Reset nameserver records for $VHOST to ns1/ns2.vultr.com"
#swchangens $VHOST ns1.vultr.com ns2.vultr.com

echo "Add DNS records for $VHOST"
vultr dns domain create -d $VHOST -s $IP4_0 >/dev/null 2>&1
swchangens $VHOST ns1.vultr.com ns2.vultr.com
#RECID=$(vultr dns record list -d $VHOST | awk '/CNAME/ {print $1}')
#vultr dns record delete -d $VHOST -r $RECID > /dev/null 2>&1
vultr dns record create -d $VHOST -n ns1.$VHOST -t A -D $NS1IP >/dev/null 2>&1
vultr dns record create -d $VHOST -n ns2.$VHOST -t A -D $NS2IP >/dev/null 2>&1
vultr dns record create -d $VHOST -n $VHOST -t NS -D ns1.$VHOST >/dev/null 2>&1
vultr dns record create -d $VHOST -n $VHOST -t NS -D ns2.$VHOST >/dev/null 2>&1
vultr dns record create -d $VHOST -n www -t A -D $IP4_0 >/dev/null 2>&1
vultr dns record create -d $VHOST -n mail -t A -D $IP4_0 >/dev/null 2>&1
vultr dns record create -d $VHOST -n $_HOST -t A -D $IP4_0 >/dev/null 2>&1
vultr dns record create -d $VHOST -n $VHOST -t TXT -D "\"v=spf1 ip4:$IP4_0/32 -all\"" >/dev/null 2>&1
vultr dns record create -d $VHOST -n _dmarc -t TXT -D "\"v=DMARC1; p=none; pct=100; rua=mailto:dmarc@renta.net; ruf=mailto:dmarc@renta.net; sp=none; aspf=r;\"" >/dev/null 2>&1

#[[ $_HOST != mail ]] && \
#  vultr dns record create -d $VHOST -n mail -t A -D $IP4_0 > /dev/null 2>&1
RECID=$(vultr dns record list -d $VHOST | awk '/MX/ {print $1}')
vultr dns record update -d $VHOST -r $RECID -D mail.$VHOST >/dev/null 2>&1
vultr server reverse-dns set-ipv4 $SUBID $IP4_0 mail.$VHOST >/dev/null 2>&1

# 5 mins should be enough but sometimes the *buntu repos can be slow
echo "Wait 15 mins until NetServa packages have been installed"
sleep 60
echo "14 mins to go"
sleep 60
echo "13 mins to go"
sleep 60
echo "12 mins to go"
sleep 60
echo "11 mins to go"
sleep 60
echo "10 mins to go"
sleep 60
echo "9 mins to go"
sleep 60
echo "8 mins to go"
sleep 60
echo "7 mins to go"
sleep 60
echo "6 mins to go"
sleep 60
echo "5 mins to go"
sleep 60
echo "4 mins to go"
sleep 60
echo "3 mins to go"
sleep 60
echo "2 mins to go"
sleep 60
echo "1 minute to go!"
sleep 60

if [[ ! -d $LECFG ]]; then
    echo "Installing dehydrated to manage LetsEncrypt SSL certificates"
    git clone --depth 1 https://github.com/lukas2511/dehydrated.git $LECFG
    chmod +x $LECFG/dehydrated
    [[ ! -d $LECFG/hooks ]] && mkdir $LECFG/hooks
    [[ ! -d $LECFG/nginx ]] && mkdir $LECFG/nginx
    git clone --depth 1 https://github.com/ttalle/dehydrated-vultr-hook.git $LECFG/hooks/vultr
    sed -i "s;/etc/;$HOME/;" $LECFG/hooks/vultr/vultr-hook.sh
#    git clone --depth 1 https://github.com/sineverba/cfhookbash.git $LECFG/hooks/cloudflare
#    git clone --depth 1 https://github.com/silkeh/pdns_api.sh.git $LECFG/hooks/pdns
fi

cd $LECFG

[[ ! -f vultr.inc ]] &&
    echo "APIKEY=$VULTR_API_KEY" >vultr.inc

[[ ! -f accounts/*/account_key.pem ]] &&
    ./dehydrated --register --accept-terms >/dev/null 2>&1

echo "Install or update LetsEncrypt SSL certificates for $VHOST"
[[ $_HOST != mail ]] && TMP="-d mail.$VHOST -d $_HOST.$VHOST" || TMP="-d $_HOST.$VHOST"
./dehydrated -c -t dns-01 -k hooks/vultr/vultr-hook.sh -d $VHOST $TMP -d www.$VHOST >/dev/null 2>&1

echo "Create local SSL enabled nginx config for $VHOST"
if [[ $_HOST != mail ]]; then
    cat <<EOS >$LECFG/nginx/$VHOST
server {
    listen                      443 ssl http2;
    server_name                 mail.$VHOST;
    ssl_certificate             $C_SSL/$VHOST/fullchain.pem;
    ssl_certificate_key         $C_SSL/$VHOST/privkey.pem;
    return 301                  https://$VHOST\$request_uri;
}
EOS
fi
cat <<EOS >>$LECFG/nginx/$VHOST
server {
    listen                      443 ssl http2;
    server_name                 $AHOST;
    set                         \$domain $AHOST;
    include                     $C_WEB/hcp.conf;
    include                     $C_WEB/common.conf;
    ssl_certificate             $C_SSL/$VHOST/fullchain.pem;
    ssl_certificate_key         $C_SSL/$VHOST/privkey.pem;
    ssl_trusted_certificate     $C_SSL/$VHOST/chain.pem;
}
server {
    listen                      443 ssl http2;
    server_name                 www.$VHOST;
    ssl_certificate             $C_SSL/$VHOST/fullchain.pem;
    ssl_certificate_key         $C_SSL/$VHOST/privkey.pem;
    return 301                  https://$VHOST\$request_uri;
}
server {
    listen                      443 ssl http2;
    server_name                 $VHOST;
    set                         \$domain $VHOST;
    include                     $C_WEB/common.conf;
    ssl_certificate             $C_SSL/$VHOST/fullchain.pem;
    ssl_certificate_key         $C_SSL/$VHOST/privkey.pem;
    ssl_trusted_certificate     $C_SSL/$VHOST/chain.pem;
}
EOS

# TODO remove the need for this by not installing a self-signed certificate in the first place?
$DOSSH $IP4_0 "bash -c \"[[ -f $C_WEB/sites-enabled/$AHOST.selfsigned ]] && rm $C_WEB/sites-enabled/$AHOST.selfsigned\""

echo "Upload SSL certificates to $IP4_0"
rsync -q -e "$DOSSH" -a $LECFG/certs/$VHOST/ $IP4_0:$C_SSL/$VHOST

echo "Upload nginx SSL config to $IP4_0"
rsync -q -e "$DOSSH" $LECFG/nginx/$VHOST $IP4_0:$C_WEB/sites-enabled/$VHOST

echo "Add and create DKIM record for $VHOST"
DKIM=$($DOSSH $IP4_0 ". .shrc; dkim add $VHOST; dkim show $VHOST" | grep "v=DKIM1")
vultr dns record create -d $VHOST -n mail._domainkey -t TXT -D "\"$DKIM\""

echo "Make sure postfix has current host details"
$DOSSH $IP4_0 "cp /etc/hosts /var/spool/postfix/etc/; cp /etc/resolv.conf /var/spool/postfix/etc/"

echo "Restart web, mail and related services"
$DOSSH $IP4_0 ". .shrc; serva restart all"

echo "Update SOA record"
curl -s -H "API-Key: $VULTR_API_KEY" \
    https://api.vultr.com/v1/dns/soa_update \
    --data "domain=$VHOST" \
    --data "nsprimary=ns1.$VHOST" \
    --data "email=admin@$VHOST"

echo "Enable DNSSEC"
# It seems dnssec is not part of the vultr binary, have to make raw API calls
curl -s -H "API-Key: $VULTR_API_KEY" \
    https://api.vultr.com/v1/dns/dnssec_enable \
    --data "domain=$VHOST" \
    --data "enable=yes"

echo "Add DNSSEC DS records"
curl -s -H "API-Key: $VULTR_API_KEY" \
    https://api.vultr.com/v1/dns/dnssec_info?domain=$VHOST |
    jq . | grep DS | awk '{print $4" "$5" "$6" "$7}' | tr -d '",' |
    while read DS; do swdsadd $VHOST $DS; done

echo "Setup vanity nameservers"
swreghostadd $VHOST ns1.$VHOST $NS1IP
swreghostadd $VHOST ns2.$VHOST $NS2IP
swchangens $VHOST ns1.$VHOST ns2.$VHOST

echo "SSH to $IP4_0 and confirm setup is finished via 'tail -f /tmp/firstboot.log'"
$DOSSH $IP4_0
