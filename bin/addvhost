#!/usr/bin/env bash
# .sh/bin/addvhost 20170217 - 20210415
# Copyright (C) 1995-2021 Mark Constable <markc@renta.net> (AGPL-3.0)

# TODO: move anything to do with hosting plans into another script

[[ -z $1 || $1 =~ -h ]] && echo "Usage: addvhost [uuser@]domain [cms(none|wp)] [ssl(none|le|self)] [ip]" && exit 1

[[ $(id -u) -gt 0 ]] && echo "ERROR: must be root (use sudo -i)" && exit 2

VHOST=$1
DOCMS=${2:-''}
DOSSL=${3:-''}
USEIP=${4:-''}

Y_M_D=$(date +"%Y-%m-%d")
_UTMP=""

if [[ $1 ]]; then
    if [[ $1 =~ "@" ]]; then
        _UTMP=${1%@*}@ # $_UTMP @ domain
        VHOST=${1#*@}  # userid @ $VHOST
    fi
else
    VHOST=$1
fi

if [[ ! -f /root/.vhosts/$VHOST ]]; then
    echo "### Create /root/.vhosts/$VHOST config file"
    sethost $_UTMP$VHOST $DTYPE $OSREL
    gethost >/root/.vhosts/$VHOST
    touch /root/.vhosts/$VHOST.conf
    chmod 600 /root/.vhosts/*
fi

. /root/.vhosts/$VHOST

# Set some default minimal hosting plan settings
V_ALIASES="10"
V_DISKQUOTA="1000000000"
V_MAILBOXES="1"
V_MAILQUOTA="500000000"

V_CREATED=$(date +"%Y-%m-%d %H:%M:%S")
V_UPDATED=$V_CREATED

IS_VHOST=$(
    cat <<EOS | $SQCMD
 SELECT COUNT(id)
   FROM vhosts
  WHERE domain = '$VHOST'
EOS
)

[[ $IS_VHOST -gt 0 ]] && echo "### ERROR: $VHOST already exists in database" && exit 6

if [[ $(grepuser ":$VHOST:") ]]; then
    echo "### Warning: $UUSER for $VHOST already exists"
else
    echo "### Create $UUSER user"
    if [[ $OSTYP == alpine ]]; then
        [[ $(getent group sudo) ]] || addgroup -S sudo
    fi
    U_GRP=$([[ $U_UID = 1000 ]] && echo "-G sudo,adm")
    TMPIP=$([[ -n $USEIP ]] && echo ",$USEIP")
    useradd -M -U -s $U_SHL -u $U_UID -d $UPATH -c "$VHOST$TMPIP" $U_GRP $UUSER
    [[ -n $UPASS && $UPASS != $APASS ]] && { echo $UUSER:$UPASS | chpasswd; }
fi

echo "### Create entry in $ADMIN.vhosts ($DTYPE)"
DO_VHOST=$(
    cat <<EOS | $SQCMD
 INSERT INTO vhosts (
        active,
        aliases,
        created,
        diskquota,
        domain,
        gid,
        mailboxes,
        mailquota,
        uid,
        uname,
        updated
) VALUES (
        1,
        $V_ALIASES,
        '$V_CREATED',
        $V_DISKQUOTA,
        '$VHOST',
        $U_GID,
        $V_MAILBOXES,
        $V_MAILQUOTA,
        $U_UID,
        '$UUSER',
        '$V_CREATED'
)
EOS
)

if [[ -d $C_FPM ]]; then

    _POOL=$C_FPM/pool.d
    [[ $OSTYP == alpine ]] && _POOL=$C_FPM/php-fpm.d

    if [ -f $_POOL/$VHOST.conf ]; then
        echo "### $_POOL/$VHOST.conf already exists"
    else
        echo "### Create $_POOL/$VHOST.conf"
        cat <<EOS >$_POOL/$VHOST.conf
[$VHOST]
user = $U_UID
group = $U_GID
include = $C_FPM/common.conf
EOS
        if [ -f $_POOL/www.conf ]; then
            echo "### Rename $_POOL/www.conf $C_FPM/www.conf"
            mv $_POOL/www.conf $C_FPM
        fi
    fi
fi

if [[ -d $UPATH ]]; then
    echo "### Warning: $UPATH already exists"
else
    echo "### Create $UPATH"
    mkdir -p $UPATH/{.cache,.ssh,.nano,.wp-cli,bin,etc,home,home/admin,home/u,var/log,var/run,var/tmp,var/www,var/www/private,var/www/public}
fi

if [[ -f $UPATH/.ssh/authorized_keys ]]; then
    echo "### $UPATH/.ssh/authorized_keys already exists"
else
    if [[ -f /root/.ssh/id_rsa.pub ]]; then
        echo "### Setup $UPATH/.ssh/authorized_keys with /root/.ssh/id_rsa.pub"
        cp /root/.ssh/id_rsa.pub $UPATH/.ssh/authorized_keys
    elif [[ -f /root/.ssh/authorized_keys ]]; then
        echo "### Setup $UPATH/.ssh/authorized_keys with /root/.ssh/authorized_keys"
        cp /root/.ssh/authorized_keys $UPATH/.ssh/authorized_keys
    else
        echo "### Warning: no /root/.ssh/authorized_keys or /root/.ssh/id_rsa.pub"
    fi
    [[ ! -f $UPATH/.hushlogin ]] && touch $UPATH/.hushlogin
fi

if [[ -L $UPATH/home/u/$VHOST ]]; then
    echo "### $UPATH/home/u/$VHOST already exists"
else
    echo "### Create custom chroot symlink"
    cd $UPATH/home/u
    ln -s ../.. $VHOST
fi

if [[ -f $UPATH/bin/busybox ]]; then
    echo "### $UPATH/bin/busybox already exists"
else
    echo "### Setup busybox with sh, hostname, tail symlinks"
    cp /bin/busybox $UPATH/bin
    cd $UPATH/bin
    ln -s busybox sh
    ln -s busybox hostname
    ln -s busybox tail
fi

if [[ -f $UPATH/.profile ]]; then
    echo "### $UPATH/.profile already exists"
else
    echo "### Create $UPATH/.profile"
    cat <<EOS >$UPATH/.profile
export PS1="\[\033[1;35m\]\$LOGNAME@$HOSTNAME \w\[\033[0m\] "
alias la='ls -lA -F --color'
alias ll='ls -l -F --color'
alias ls='ls -F --color'
alias e='nano -t -x -c'
alias plog='tail -f ~/var/log/php-errors.log'
EOS
fi

if [[ -f $UPATH/etc/passwd ]]; then
    echo "### $UPATH/etc/passwd already exists"
else
    echo "### Create $UPATH/etc/passwd"
    W_UID=$(id -u $WUGID)
    W_GID=$(id -g $WUGID)
    cat <<EOS >$UPATH/etc/passwd
root:x:0:0:::
$WUGID:x:$W_UID:$W_GID:::
$UUSER:x:$U_UID:$U_GID:::
EOS
fi

if [[ -f $UPATH/etc/group ]]; then
    echo "### $UPATH/etc/group already exists"
else
    echo "### Create $UPATH/etc/group"
    W_GID=$(id -g $WUGID)
    cat <<EOS >$UPATH/etc/group
root:x:0:
$WUGID:x:$W_GID:
$UUSER:x:$U_GID:
EOS
fi

if [[ -f $WPATH/index.html || -f $WPATH/index.php ]]; then
    [[ -f $WPATH/index.html ]] && echo "### $WPATH/index.html already exists"
    [[ -f $WPATH/index.php ]] && echo "### $WPATH/index.php already exists"
else
    echo "### Create $WPATH/index.html"
    echo "<!DOCTYPE html><title>$VHOST</title><h1 style=\"text-align:center\">$VHOST</h1>" >$WPATH/index.html
fi

if [[ -f $WPATH/phpinfo.php ]]; then
    echo "### $WPATH/phpinfo.php already exists"
else
    echo "### Create $WPATH/phpinfo.php"
    echo "<?php error_log(__FILE__.' '.\$_SERVER['REMOTE_ADDR']); phpinfo();" >$WPATH/phpinfo.php
fi

if [[ -f $WPATH/private/.htpasswd ]]; then
    echo "### $WPATH/private/.htpasswd already exists"
else
    PIN=$RANDOM
    echo "### Create $WPATH/private/.htpasswd (guest/$PIN)"
    htpasswd -b -c $WPATH/private/.htpasswd guest $PIN >/dev/null 2>&1
    [[ $IP4_0 =~ ^192.168 || $IP4_0 =~ ^10 ]] && SCHEME="http://" || SCHEME="https://"
    cat <<EOS | tee -a /root/.vhosts/$VHOST.conf >/dev/null
Private
=========

WebFiles: $SCHEME$VHOST/private
Username: guest
Password: $PIN

EOS
fi

chperms $VHOST
serva reload php

#LOCIP=$(ip -4 route get 1.1.1.1 | awk '/src/ {print $7}')
#DNSIP=$(host -t a $VHOST|cut -d' ' -f4)
#if [[ $LOCIP =~ ^192.168 || $LOCIP =~ ^10 ]]; then

if [[ $DOSSL == self ]]; then
    echo "### Note: if this server has outside net access with DNS"
    echo "###       pointing a public IP to it's FQDN then use"
    echo "###           newssl $VHOST mail www [IP]"
    echo "###       to provide a real LetsEncrypt SSL certificate."

    if [[ ! -d $C_SSL/$VHOST ]]; then
        # Temporary self-signed SSL certificate defaults
        C="AU"
        ST="QLD"
        L="GoldCoast"
        O="NetServa"
        OU="IT Department"

        echo "### Create temporary self-signed certificate for $VHOST"
        [[ ! -d $C_SSL/$VHOST ]] && mkdir $C_SSL/$VHOST
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -subj "/C=$C/ST=$ST/L=$L/O=$O/OU=$OU/CN=$VHOST" \
            -keyout /etc/ssl/$VHOST/privkey.pem \
            -out /etc/ssl/$VHOST/fullchain.pem >/dev/null 2>&1
    fi

    if [[ ! -f $C_WEB/sites-enabled/$VHOST.selfsigned ]]; then
        echo "### Create $C_WEB/sites-enabled/$VHOST.selfsigned"
        [[ $USEIP ]] && USEIP="$USEIP:"
        cat <<EOS | tee $C_WEB/sites-enabled/$VHOST.selfsigned >/dev/null
server {
    listen                      ${USEIP}443 ssl http2;
    server_name                 $VHOST;
    set                         \$domain $VHOST;
    include                     /etc/nginx/common.conf;
    ssl_certificate             $C_SSL/$VHOST/fullchain.pem;
    ssl_certificate_key         $C_SSL/$VHOST/privkey.pem;
    ssl_stapling                off;
    ssl_stapling_verify         off;
}
EOS
    fi
    serva restart nginx
elif [[ $DOSSL == le ]]; then
    [[ -f $C_WEB/sites-enabled/*.selfsigned ]] &&
        rm $C_WEB/sites-enabled/*.selfsigned

    newssl $VHOST mail www autoconfig autodiscover $USEIP
fi

addvmail $VUSER@$VHOST
chshpw $UUSER $UPASS

MID=$(
    cat <<EOS | $SQCMD
 SELECT id FROM vmails
  WHERE user = '$VUSER@$VHOST'
EOS
)

echo "### Create $VUSER@$VHOST entry in $ADMIN.vmail_log ($DTYPE)"
DO_VMAILLOG=$(
    cat <<EOS | $SQCMD
 INSERT INTO vmail_log (
        mid,
        ymd
) VALUES (
        $MID,
        '$Y_M_D'
)
EOS
)

if [[ -d $WPATH && $DOCMS == wp ]]; then
    if [[ $DTYPE == mysql ]]; then
        addwp $VHOST
        [[ -d $UPATH/var/www_old/.well-known ]] && mv $UPATH/var/www_old/.well-known $WPATH
        [[ -d $UPATH/var/www_old/private ]] && mv $UPATH/var/www_old/private $WPATH
        [[ -d $UPATH/var/www_old/public ]] && mv $UPATH/var/www_old/public $WPATH
    else
        echo "### ERROR: WordPress requires MySQL"
    fi
fi

# TODO: cleanup $(hostname -f) /etc/ssl and /etc/nginx/sites-enabled
#       unless a better place is found or a dedicated script is created

logging $VHOST update >/dev/null
