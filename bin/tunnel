#!/usr/bin/env bash
# .sh/bin/tunnel 20181102 - 20181207
# Copyright (C) 1995-2018 Mark Constable <markc@renta.net> (AGPL-3.0)

[[ -z $1 || $1 =~ '-h' ]] &&
    echo "Usage: tunnel forward|reverse|list|del targethost [lport] [rport] [luser] [ruser] [sport]" && exit 1

[[ $(id -u) -gt 0 ]] && echo "!!! ERROR: must be root (use sudo -i)" && exit 2

THOST=${2:-'local'}
LPORT=${3:-'9999'}
RPORT=${4:-'9999'}
LUSER=${5:-'utunnel'}
RUSER=${6:-'utunnel'}
SPORT=${7:-'9'}

LHOME=$(eval echo ~$LUSER)
TUNID="tunnel-${LPORT}-${RPORT}"
SOPTS="-o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -o StrictHostKeyChecking=no"

if [[ $1 == list ]]; then

    stat -t /etc/systemd/system/tunnel* >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        echo "!!! List local systemd service files"
        /bin/ls -1 /etc/systemd/system/tunnel*
    else
        echo "No systemd tunnel files exit"
    fi
    echo

    if [[ -f $LHOME/.ssh/authorized_keys ]]; then
        echo "!!! List keys in $LHOME/.ssh/authorized_keys"
        cat $LHOME/.ssh/authorized_keys | awk '{print $3}'
        echo
    fi

    stat -t $LHOME/.ssh/* >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        echo "!!! List all files in $LHOME/.ssh"
        /bin/ls -1 $LHOME/.ssh/
        echo
    fi

    if [[ $THOST != local ]]; then
        if [[ ! -z $SSHPASS ]]; then
            sshpass -e ssh -o StrictHostKeyChecking=no -p $SPORT $RUSER@$THOST exit
            if [[ $? -eq 0 ]]; then
                sshpass -e ssh -o StrictHostKeyChecking=no -p $SPORT -T $RUSER@$THOST <<EOSSH
echo "!!! List keys in $RUSER@$THOST:.ssh/authorized_keys"
cat .ssh/authorized_keys | awk '{print \$3}'
echo
echo "!!! List all files in $RUSER@$THOST:.ssh/"
ls -1 .ssh
EOSSH
            fi
        fi
    fi
    exit 3

elif [[ $1 == del ]]; then

    # Stop, disable and remove systemd service control file

    SERVF="/etc/systemd/system/${TUNID}.service"
    if [[ -f $SERVF ]]; then
        systemctl stop $TUNID
        systemctl disable $TUNID >/dev/null 2>&1
        rm $SERVF
        systemctl daemon-reload
        [[ -f /tmp/$TUNID.sock ]] && ssh -S /tmp/$TUNID.sock -O exit foobar
        echo "!!! Removed $SERVF"
    else
        echo "!!! $SERVF does not exist"
    fi
    echo

    # Remove local SSH public key from .ssh/authorized_keys

    grep " $TUNID@" $LHOME/.ssh/authorized_keys >/dev/null 2>&1
    if [[ $? -eq 0 ]]; then
        echo "!!! Delete local public key from $LHOME/.ssh/authorized_keys"
        sed '/'" $TUNID@"'/d' -i $LHOME/.ssh/authorized_keys
    fi

    # Remove local public and private SSH keys

    if [[ -f $LHOME/.ssh/$TUNID ]]; then
        echo "!!! Delete local private key $LHOME/.ssh/$TUNID"
        rm $LHOME/.ssh/$TUNID
    fi

    if [[ -f $LHOME/.ssh/$TUNID.pub ]]; then
        echo "!!! Delete local public key $LHOME/.ssh/$TUNID.pub"
        rm $LHOME/.ssh/$TUNID.pub
    fi

    # Remove SSH public key from remote:.ssh/authorized_keys

    if [[ $THOST != local ]]; then
        if [[ ! -z $SSHPASS ]]; then
            sshpass -e ssh -o StrictHostKeyChecking=no -p $SPORT $RUSER@$THOST exit
            if [[ $? -eq 0 ]]; then
                sshpass -e ssh -o StrictHostKeyChecking=no -p $SPORT -T $RUSER@$THOST <<EOSSH
grep " $TUNID@" .ssh/authorized_keys >/dev/null 2>&1
if [[ $? -eq 0 ]]; then
    echo "!!! Delete remote public key from $RUSER@$THOST:.ssh/authorized_keys"
    sed '/ $TUNID@/d' -i .ssh/authorized_keys
fi

if [[ -f .ssh/$TUNID ]]; then
    echo "!!! Delete remote private key $RUSER@$THOST:.ssh/$TUNID"
    rm .ssh/$TUNID
fi

if [[ -f .ssh/$TUNID.pub ]]; then
    echo "!!! Delete remote public key $RUSER@$THOST:.ssh/$TUNID.pub"
    rm .ssh/$TUNID.pub
fi
EOSSH
            fi
        fi
    fi
    exit 4
fi

if [[ $1 == forward ]]; then
    T_ARG='-L'
    T_STR=Forward
elif [[ $1 == reverse ]]; then
    T_ARG='-R'
    T_STR=Reverse
else
    echo "!!! First argument must be either forward, reverse, list or del"
    exit 5
fi

if [[ ! $(getent passwd | grep "^$LUSER:") ]]; then
    echo "!!! Create $LUSER system user"
    useradd -r -m $LUSER
    su - $LUSER -c "
mkdir .ssh
chmod 700 .ssh"
fi

# Create a new SSH key if not exists

if [[ ! -f $LHOME/.ssh/$TUNID ]]; then
    echo "!!! Create $LHOME/.ssh/$TUNID key"
    su - $LUSER -c "
cd .ssh
ssh-keygen -f $LHOME/.ssh/$TUNID -N '' -C $TUNID@$THOST >/dev/null 2>&1
chmod 600 *"

    if [[ ! -z $SSHPASS ]]; then
        P_KEY=$(cat $LHOME/.ssh/$TUNID.pub)
        sshpass -e ssh -o StrictHostKeyChecking=no -p $SPORT $RUSER@$THOST exit
        if [[ $? -eq 0 ]]; then
            sshpass -e ssh -o StrictHostKeyChecking=no -p $SPORT -T $RUSER@$THOST <<EOSSH
echo "!!! Append $LHOME/.ssh/$TUNID.pub to $RUSER@$THOST:.ssh/authorized_keys"
echo "$P_KEY" >> .ssh/authorized_keys       
EOSSH
        else
            echo "!!! ERROR: SSH can't connect to $RUSER@$THOST"
            exit
        fi
    else
        cat $P_KEY
        echo "
Copy above public key to $RUSER@$THOST:.ssh/authorized_keys on the remote server
then test using below command first before running this tunnel script again...

ssh -o StrictHostKeyChecking=no -p $SPORT -i $LHOME/.ssh/$TUNID $RUSER@$THOST
"
        exit
    fi
fi

service_file() {
    cat <<EOS
[Unit]
Description=${T_STR} SSH Tunnel
ConditionPathExists=|/usr/bin
After=network.target

[Service]
Type=simple
User=${LUSER}
#Type=forking
ExecStart=/usr/bin/ssh ${SOPTS} -N -M -S /tmp/${TUNID}.sock -i ${LHOME}/.ssh/${TUNID} ${T_ARG} ${LPORT}:127.0.0.1:${RPORT} -p ${SPORT} ${RUSER}@${THOST}
RestartSec=10
Restart=on-success
RestartForceExitStatus=255

#RemainAfterExit=yes
#RestartSec=3
#Restart=always

[Install]
WantedBy=multi-user.target
EOS
}

if [[ $1 == forward || $1 == reverse ]]; then
    service_file $* >/etc/systemd/system/${TUNID}.service
    systemctl daemon-reload
    sleep 1
    systemctl start ${TUNID}.service
    systemctl enable ${TUNID}.service >/dev/null 2>&1
    echo "Added /etc/systemd/system/${TUNID}.service"
fi

systemd-cat -t hlog echo "$(whoami) $(basename $0) $*"
