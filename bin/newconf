#!/usr/bin/env bash
# .sh/bin/newconf 20200304 - 20200320
# Copyright (C) 1995-2020 Mark Constable <markc@renta.net> (AGPL-3.0)

# WIP ### breakout web server config files from newssl

[[ -z $1 || $1 =~ -h ]] && echo "Usage: newconf domain [subd subd...[0.0.0.0]]" && exit 1

[[ $(id -u) -gt 0 ]] && echo "ERROR: must be root (use sudo -i)" && exit 2

VHOST=$1
_ARGS="$2 $3 $4 $5 $6 $7 $8 $9"
IPREG="^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$"
IPARG=

source /root/.vhosts/$VHOST || exit

for SUB in $_ARGS; do
    [[ $SUB =~ $IPREG ]] && IPARG="$SUB:" && continue
    SUBDS="$SUBDS -d $SUB.$VHOST"
done

if [[ -d /usr/local/lsws ]]; then
    C_WEB="/usr/local/lsws"
    WSERV=lsws
else
    C_WEB="/etc/nginx"
    WSERV=nginx
fi

[[ ! -d $WPATH ]] && echo "ERROR: $WPATH does not exist" && exit 2

# Nginx config files

if [[ $WSERV == nginx ]]; then ### Nginx config files

    if [[ ! -f $C_WEB/sites-enabled/$VHOST ]]; then

        if grep -q autoconfig. <<<"$SUBDS"; then
            cat <<EOS >>$C_WEB/sites-enabled/$VHOST
server {
    listen                      ${IPARG}443 ssl http2;
    server_name                 autoconfig.$VHOST;
    location                    ~* /mail/config-v1.1.xml {
        root                    /home/u/$MHOST/var/www/.well-known/;
        try_files               /autodiscover.php =404;
        fastcgi_pass            unix:/home/u/$MHOST/var/run/fpm.sock;
        include                 fastcgi.conf;
        fastcgi_param           SERVER_ADDR "";
        fastcgi_param           REMOTE_ADDR \$http_x_real_ip;
    }
    ssl_certificate             $C_SSL/$VHOST/fullchain.pem;
    ssl_certificate_key         $C_SSL/$VHOST/privkey.pem;
    ssl_trusted_certificate     $C_SSL/$VHOST/chain.pem;
}
EOS
        fi

        if grep -q autodiscover. <<<"$SUBDS"; then
            cat <<EOS >>$C_WEB/sites-enabled/$VHOST
server {
    listen                      ${IPARG}443 ssl http2;
    server_name                 autodiscover.$VHOST;
    location                    ~* /autodiscover/autodiscover.xml {
        root                    /home/u/$MHOST/var/www/.well-known/;
        try_files               /autodiscover.php =404;
        fastcgi_pass            unix:/home/u/$MHOST/var/run/fpm.sock;
        include                 fastcgi.conf;
        fastcgi_param           SERVER_ADDR "";
        fastcgi_param           REMOTE_ADDR \$http_x_real_ip;
    }
    ssl_certificate             $C_SSL/$VHOST/fullchain.pem;
    ssl_certificate_key         $C_SSL/$VHOST/privkey.pem;
    ssl_trusted_certificate     $C_SSL/$VHOST/chain.pem;
}
EOS
        fi

        if grep -q mail. <<<"$SUBDS"; then
            cat <<EOS >>$C_WEB/sites-enabled/$VHOST
server {
    listen                      ${IPARG}443 ssl http2;
    server_name                 mail.$VHOST;
    set                         \$domain mail.$VHOST;
    include                     $C_WEB/hcp.conf;
    include                     $C_WEB/common.conf;
    ssl_certificate             $C_SSL/$VHOST/fullchain.pem;
    ssl_certificate_key         $C_SSL/$VHOST/privkey.pem;
    ssl_trusted_certificate     $C_SSL/$VHOST/chain.pem;
}
EOS
        fi

        if grep -q www. <<<"$SUBDS"; then
            cat <<EOS >>$C_WEB/sites-enabled/$VHOST
server {
    listen                      ${IPARG}443 ssl http2;
    server_name                 www.$VHOST;
    ssl_certificate             $C_SSL/$VHOST/fullchain.pem;
    ssl_certificate_key         $C_SSL/$VHOST/privkey.pem;
    return 301                  https://$VHOST\$request_uri;
}
EOS
        fi

        cat <<EOS >>$C_WEB/sites-enabled/$VHOST
server {
    listen                      ${IPARG}443 ssl http2;
    server_name                 $VHOST;
    set                         \$domain $VHOST;
    include                     $C_WEB/common.conf;
    ssl_certificate             $C_SSL/$VHOST/fullchain.pem;
    ssl_certificate_key         $C_SSL/$VHOST/privkey.pem;
    ssl_trusted_certificate     $C_SSL/$VHOST/chain.pem;
}
EOS
    fi
    # Cleanup any dangling left over self signed certificates
    if [[ -n "$(find $C_WEB/sites-enabled -maxdepth 1 -name '*.selfsigned' -print -quit)" ]]; then
        echo "Remove $C_WEB/sites-enabled/*.selfsigned"
        rm $C_WEB/sites-enabled/*.selfsigned
    fi
    chmod 755 $C_SSL/$VHOST

elif
    [[ $WSERV == lsws ]]
then ### OpenLiteSpeed config files

    if [[ ! -f $C_WEB/conf/vhosts/$VHOST/vhconf.conf ]]; then
        [[ -d $C_WEB/conf/vhosts/$VHOST ]] || mkdir -p $C_WEB/conf/vhosts/$VHOST
        cat <<EOS >$C_WEB/conf/vhosts/$VHOST/vhconf.conf
docRoot                 $WPATH
vhDomain                $VHOST
vhAliases               www.$VHOST
adminEmails             localhost
enableGzip              1

errorlog $C_WEB/logs/$VHOST.error_log {
useServer               0
logLevel                ERROR
rollingSize             10M
}

accesslog $C_WEB/logs/$VHOST.access_log {
useServer               0
logFormat               "%v %h %l %u %t "%r" %>s %b"
logHeaders              5
rollingSize             10M
keepDays                10
}

index  {
useServer               0
indexFiles              index.php, index.html
}

scripthandler  {
add                     lsapi:${PHPVER} php
}

extprocessor ${PHPVER} {
type                    lsapi
address                 uds://tmp/lshttpd/$VHOST.sock
maxConns                35
env                     PHP_LSAPI_CHILDREN=35
initTimeout             60
retryTimeout            0
persistConn             1
respBuffer              0
autoStart               1
path                    ${LSDIR}/${PHPVER}/bin/lsphp
backlog                 100
instances               1
extUser                 $U_UID
extGroup                $U_GID
runOnStartUp            1
priority                0
memSoftLimit            2047M
memHardLimit            2047M
procSoftLimit           400
procHardLimit           500
}

rewrite  {
enable                  1
autoLoadHtaccess        1
}

vhssl  {
keyFile                 ${LSDIR}/conf/example.key
certFile                ${LSDIR}/conf/example.crt
certChain               1
}
EOS
        chown -R lsadm:lsadm $C_WEB/conf/vhosts/*
    else
        echoR "Targeted file already exist, skip!"
    fi
else
    echo "'$WSERV' does not exist"
fi

systemd-cat -t hlog echo "$(whoami) $(basename $0) $*"
